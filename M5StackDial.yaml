#main YAML program
substitutions:

# Device customization
# Personalización del dispositivo

  name: m5stack-dial
  friendly_name: M5Stack Dial
  background_color: 'fab02b'
  
  background_image: https://pusheen.com/wp-content/uploads/2025/09/Baguette_Nap_GIF.gif #https://aguacatec.es/wp-content/uploads/2025/02/mravocado_background_white.jpg
  background_image_saver: https://avatars.githubusercontent.com/u/163356846?v=4 #https://aguacatec.es/wp-content/uploads/2025/02/mravocado_bg_off.jpg #https://avatars.githubusercontent.com/u/163356846?v=4
  background_image_device: https://aguacatec.es/wp-content/uploads/2025/02/mravocado_bg_device.jpeg


# Icons
# Iconos

  icon_1: mdi:led-strip-variant
  icon_2: mdi:thermostat
  icon_3: mdi:robot-vacuum-variant
  icon_4: mdi:light-recessed          
  icon_5: mdi:fan                
  icon_6: mdi:air-conditioner
  icon_7: mdi:air-humidifier
  icon_8: mdi:lightbulb   #mdi:lightbulb

# Sounds
# Sonidos

  menu_sound: 'beep:d=64,o=5,b=255:c7'
  alarm_sound: 'xmen:d=4,o=6,b=200:16f#5,16g5,16b5,16d,c#,8b5,8f#5,p,16f#5,16g5,16b5,16d,c#,8b5,8g5,p,16f#5,16g5,16b5,16d,c#,8b5,8d,2p,8c#,8b5,2p'


# Example of Lights
# Ejemplo de Luces

  desk_led: light.tira_led_escritorio
  lamp: light.front_door_lightsssss
  porch_light: light.front_door_lights      
  
# Color-capable lights (set to true for lights that support color)
# Luces con capacidad de color (establecer en true para luces que soportan color)
  desk_led_has_color: 'true'
  lamp_has_color: 'false'
  porch_light_has_color: 'true'

# Example of Thermostat
# Ejemplo de Termostatos

  climate: climate.bedroom
  #climate2: climate.living_room
  aircon: climate.living_room

# Example of Vacuum
# Ejemplo de Aspirador

  vacuum: vacuum.betty

# Example of Fan
# Ejemplo de Ventilador

  ceiling_fan: fan.ceiling_fan         # New device (replaces printer)

# Example of dehumidifier
# Ejemplo de Deshumidificador

  dehumidifier: humidifier.deshumidificador

# NFC/RFID Tags
# Etiquetas NFC/RFID

#  tag1: C3-DB-4F-28
#  tag2: 03-55-E5-13

# Other settings
# Otros ajustes

  allowed_characters: " ¿?¡!#%'()+,-./:°0123456789ABCDEFGHIJKLMNOPQRSTUVWYZabcdefghijklmnopqrstuvwxyzáéíóú"

################################################################################################################


esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  on_boot:
    then:
      - pcf8563.read_time:
      - display.page.show: home
  platformio_options:
    board_build.flash_mode: dio

esp32:
  board: esp32-s3-devkitc-1
  flash_size: 8MB
  framework:
    type: esp-idf

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "M5Stack-Dial Fallback Hotspot"
    password: "Javicantcode"

api:
  encryption:
    key: "IDKDUDEFIGUREITOUT"
  services:
    - service: play_sound
      variables:
        song: string
        volume: int 
      then:
        - lambda: "id(script_rtttl_play).execute(song, volume);"
    - service: set_light_color
      variables:
        light_entity: string
        hue: float
        sat: float
      then:
        - homeassistant.action:
            service: light.turn_on
            data_template:
              entity_id: "{{ light_entity }}"
              hs_color: "[{{ hue }}, {{ sat * 100 }}]"

script:
  - id: script_rtttl_play
    parameters:
      song: string
      volume: int 
    mode: single
    then:
      - lambda: |-
          float volume_f = (volume>0) ? ((float)clamp(volume, 0, 100))/100.0f : 1.0f;
          id(buzzer).set_max_power(volume_f);
      - rtttl.play:
          rtttl: !lambda 'return (song.find('':'') == std::string::npos) ? ("song:d=16,o=5,b=100:" + song).c_str() : song.c_str();'

ota:
  - platform: esphome
    password: "Pusheen2050"

logger:

captive_portal:

binary_sensor:
  - platform: gpio
    name: "Front Button"
    id: front_button
    pin:
      number: GPIO42
      inverted: true
    internal: true
    on_press:
      then:
        - if:
            condition:
              switch.is_on: menu_sounds
            then:
              - rtttl.play: ${menu_sound}

        - if:
            condition:
              light.is_on: backlight
            then:
              - if:
                  condition:
                    display.is_displaying_page: device_control
                  then:
                    # Device 1: Desk LED
                    - if:
                        condition:
                          lambda: |-
                            return id(device) == 1;
                        then:
                          - homeassistant.action:
                              service: light.toggle
                              data:
                                entity_id: ${desk_led}

                    # Device 2: Thermostat (SAFE: explicit cool on / off)
                    - if:
                        condition:
                          lambda: |-
                            return id(device) == 2;
                        then:
                          - if:
                              condition:
                                lambda: 'return id(device_thermostat).state == "off";'
                              then:
                                - homeassistant.action:
                                    service: climate.set_hvac_mode
                                    data:
                                      entity_id: ${climate}
                                      hvac_mode: cool
                                - homeassistant.action:
                                    service: climate.turn_on
                                    data:
                                      entity_id: ${climate}
                              else:
                                - homeassistant.action:
                                    service: climate.turn_off
                                    data:
                                      entity_id: ${climate}

                    # Device 3: Vacuum
                    - if:
                        condition:
                          lambda: |-
                            return id(device) == 3;
                        then:
                          - if:
                              condition:
                                lambda: 'return id(device_vacuum).state == "cleaning";'
                              then:
                                - homeassistant.action:
                                    service: vacuum.pause
                                    data:
                                      entity_id: ${vacuum}
                              else:
                                - homeassistant.action:
                                    service: vacuum.start
                                    data:
                                      entity_id: ${vacuum}

                    # Device 4: Porch Light
                    - if:
                        condition:
                          lambda: |-
                            return id(device) == 4;
                        then:
                          - homeassistant.action:
                              service: light.toggle
                              data:
                                entity_id: ${porch_light}

                    # Device 5: Ceiling Fan
                    - if:
                        condition:
                          lambda: |-
                            return id(device) == 5;
                        then:
                          - homeassistant.action:
                              service: fan.toggle
                              data:
                                entity_id: ${ceiling_fan}

                    # Device 6: Aircon (SAFE: explicit cool on / off)
                    - if:
                        condition:
                          lambda: |-
                            return id(device) == 6;
                        then:
                          - if:
                              condition:
                                lambda: 'return id(device_aircon).state == "off";'
                              then:
                                - homeassistant.action:
                                    service: climate.set_hvac_mode
                                    data:
                                      entity_id: ${aircon}
                                      hvac_mode: cool
                                - homeassistant.action:
                                    service: climate.turn_on
                                    data:
                                      entity_id: ${aircon}
                              else:
                                - homeassistant.action:
                                    service: climate.turn_off
                                    data:
                                      entity_id: ${aircon}

                    # Device 7: Dehumidifier
                    - if:
                        condition:
                          lambda: |-
                            return id(device) == 7;
                        then:
                          - homeassistant.action:
                              service: humidifier.toggle
                              data:
                                entity_id: ${dehumidifier}

                    # Device 8: Lamp
                    - if:
                        condition:
                          lambda: |-
                            return id(device) == 8;
                        then:
                          - homeassistant.action:
                              service: light.toggle
                              data:
                                entity_id: ${lamp}

              - if:
                  condition:
                    display.is_displaying_page: color_picker
                  then:
                    - lambda: |-
                        id(on_color_picker) = false;
                    - display.page.show: device_control

              - if:
                  condition:
                    display.is_displaying_page: locked_screen
                  then:
                    - switch.turn_on: mravocado_display
                    - light.turn_on:
                        id: backlight
                        brightness: 100%
                    - display.page.show: home

              - if:
                  condition:
                    display.is_displaying_page: home
                  then:
                    - if:
                        condition:
                          lambda: |-
                            return id(device) > 0;
                        then:
                          - light.turn_on:
                              id: backlight
                              brightness: 100%
                          - display.page.show: device_control
            else:
              - switch.turn_on: mravocado_display
              - light.turn_on:
                  id: backlight
                  brightness: 100%
              - display.page.show: home

        - lambda: |-
            id(inactivity_time) = 0;

  - platform: touchscreen
    name: "Home Button (Device Control)"
    internal: true
    x_min: 80   
    x_max: 140  
    y_min: 0   
    y_max: 60  
    page_id: device_control
    on_press:
      - if:
          condition:
            switch.is_on: menu_sounds
          then:
            - rtttl.play: ${menu_sound}
      - display.page.show: home
      - lambda: |-
          id(device) = 0;
          id(inactivity_time) = 0;

  - platform: gpio
    name: Hold Button
    pin: GPIO46
    internal: True
    on_press:
      then:
        - if:
            condition:
              display.is_displaying_page: device_control
            then:
            - if:
                condition:
                  lambda: |-
                    return (id(device) == 1 && ${desk_led_has_color}) || 
                           (id(device) == 4 && ${porch_light_has_color}) ||
                           (id(device) == 8 && ${lamp_has_color});
                then:
                - lambda: |-
                    id(on_color_picker) = true;
                    id(inactivity_time) = 0;
                - display.page.show: color_picker


  - platform: touchscreen
    name: "Open Color Picker (Bottom Bar)"
    internal: true
    x_min: 0
    x_max: 240
    y_min: 200
    y_max: 240
    page_id: device_control
    on_press:
      - if:
          condition:
            switch.is_on: menu_sounds
          then:
            - rtttl.play: ${menu_sound}
      - if:
          condition:
            lambda: |-
              return (id(device) == 1 && ${desk_led_has_color}) ||
                     (id(device) == 4 && ${porch_light_has_color}) ||
                     (id(device) == 8 && ${lamp_has_color});
          then:
            - lambda: |-
                id(on_color_picker) = true;
                id(inactivity_time) = 0;
            - display.page.show: color_picker

  - platform: touchscreen
    name: "Device Button"
    internal: true
    x_min: 81
    x_max: 160
    y_min: 60
    y_max: 189
    page_id: device_control
    on_press:
      - if:
          condition:
            switch.is_on: menu_sounds
          then:
            - rtttl.play: ${menu_sound}

      # Device 1: Desk LED
      - if:
          condition:
            lambda: |-
              return id(device) == 1;
          then:
            - homeassistant.action:
                service: light.toggle
                data:
                  entity_id: ${desk_led}

      # Device 2: Thermostat (SAFE: explicit cool on / off)
      - if:
          condition:
            lambda: |-
              return id(device) == 2;
          then:
            - if:
                condition:
                  lambda: 'return id(device_thermostat).state == "off";'
                then:
                  - homeassistant.action:
                      service: climate.set_hvac_mode
                      data:
                        entity_id: ${climate}
                        hvac_mode: cool
                  - homeassistant.action:
                      service: climate.turn_on
                      data:
                        entity_id: ${climate}
                else:
                  - homeassistant.action:
                      service: climate.turn_off
                      data:
                        entity_id: ${climate}

      # Device 3: Vacuum
      - if:
          condition:
            lambda: |-
              return id(device) == 3;
          then:
            - if:
                condition:
                  lambda: 'return id(device_vacuum).state == "cleaning";'
                then:
                  - homeassistant.action:
                      service: vacuum.pause
                      data:
                        entity_id: ${vacuum}
                else:
                  - homeassistant.action:
                      service: vacuum.start
                      data:
                        entity_id: ${vacuum}

      # Device 4: Porch Light
      - if:
          condition:
            lambda: |-
              return id(device) == 4;
          then:
            - homeassistant.action:
                service: light.toggle
                data:
                  entity_id: ${porch_light}

      # Device 5: Ceiling Fan
      - if:
          condition:
            lambda: |-
              return id(device) == 5;
          then:
            - homeassistant.action:
                service: fan.toggle
                data:
                  entity_id: ${ceiling_fan}

      # Device 6: Aircon (SAFE: explicit cool on / off)
      - if:
          condition:
            lambda: |-
              return id(device) == 6;
          then:
            - if:
                condition:
                  lambda: 'return id(device_aircon).state == "off";'
                then:
                  - homeassistant.action:
                      service: climate.set_hvac_mode
                      data:
                        entity_id: ${aircon}
                        hvac_mode: cool
                  - homeassistant.action:
                      service: climate.turn_on
                      data:
                        entity_id: ${aircon}
                else:
                  - homeassistant.action:
                      service: climate.turn_off
                      data:
                        entity_id: ${aircon}

      # Device 7: Dehumidifier
      - if:
          condition:
            lambda: |-
              return id(device) == 7;
          then:
            - homeassistant.action:
                service: humidifier.toggle
                data:
                  entity_id: ${dehumidifier}

      # Device 8: Lamp
      - if:
          condition:
            lambda: |-
              return id(device) == 8;
          then:
            - homeassistant.action:
                service: light.toggle
                data:
                  entity_id: ${lamp}

      - lambda: |-
          id(inactivity_time) = 0;

  - platform: touchscreen
    name: "Minus Button"
    internal: true
    x_min: 0
    x_max: 80
    y_min: 80
    y_max: 199
    page_id: device_control
    on_press:
      - if:
          condition:
            switch.is_on: menu_sounds
          then:
            - rtttl.play: ${menu_sound}

      - if:
          condition:
            display.is_displaying_page: device_control
          then:
            # Device 1: Desk LED
            - if:
                condition:
                  lambda: |-
                    return id(device) == 1;
                then:
                  - homeassistant.action:
                      service: light.turn_on
                      data:
                        entity_id: ${desk_led}
                        brightness_step_pct: '-10'

            # Device 2: Thermostat (SAFE: force cool, then nudge temp)
            - if:
                condition:
                  lambda: |-
                    return id(device) == 2;
                then:
                  - homeassistant.action:
                      service: climate.set_hvac_mode
                      data:
                        entity_id: ${climate}
                        hvac_mode: cool
                  - homeassistant.action:
                      service: climate.set_temperature
                      data:
                        entity_id: ${climate}
                      data_template:
                        temperature: '{{ my_variable | float }}'
                      variables:
                        my_variable: |-
                          return id(thermostat_temperature).state - 1.0;

            # Device 4: Porch Light
            - if:
                condition:
                  lambda: |-
                    return id(device) == 4;
                then:
                  - homeassistant.action:
                      service: light.turn_on
                      data:
                        entity_id: ${porch_light}
                        brightness_step_pct: '-10'

            # Device 5: Ceiling Fan
            - if:
                condition:
                  lambda: |-
                    return id(device) == 5;
                then:
                  - homeassistant.action:
                      service: fan.decrease_speed
                      data:
                        entity_id: ${ceiling_fan}

            # Device 6: Aircon (SAFE: force cool, then nudge temp)
            - if:
                condition:
                  lambda: |-
                    return id(device) == 6;
                then:
                  - homeassistant.action:
                      service: climate.set_hvac_mode
                      data:
                        entity_id: ${aircon}
                        hvac_mode: cool
                  - homeassistant.action:
                      service: climate.set_temperature
                      data:
                        entity_id: ${aircon}
                      data_template:
                        temperature: '{{ my_variable | float }}'
                      variables:
                        my_variable: |-
                          return id(aircon_temperature).state - 1.0;

            # Device 7: Dehumidifier
            - if:
                condition:
                  lambda: |-
                    return id(device) == 7;
                then:
                  - homeassistant.action:
                      service: humidifier.set_humidity
                      data:
                        entity_id: ${dehumidifier}
                      data_template:
                        humidity: '{{ my_variable | float }}'
                      variables:
                        my_variable: |-
                          return id(dehumidifier_humidity).state - 5.0;

            # Device 8: Lamp
            - if:
                condition:
                  lambda: |-
                    return id(device) == 8;
                then:
                  - homeassistant.action:
                      service: light.turn_on
                      data:
                        entity_id: ${lamp}
                        brightness_step_pct: '-10'

      - lambda: |-
          id(inactivity_time) = 0;

  - platform: touchscreen
    name: "Plus Button"
    internal: true
    x_min: 161
    x_max: 240
    y_min: 80
    y_max: 199
    page_id: device_control
    on_press:
      - if:
          condition:
            switch.is_on: menu_sounds
          then:
            - rtttl.play: ${menu_sound}

      - if:
          condition:
            display.is_displaying_page: device_control
          then:
            # Device 1: Desk LED
            - if:
                condition:
                  lambda: |-
                    return id(device) == 1;
                then:
                  - homeassistant.action:
                      service: light.turn_on
                      data:
                        entity_id: ${desk_led}
                        brightness_step_pct: '10'

            # Device 2: Thermostat (SAFE: force cool, then nudge temp)
            - if:
                condition:
                  lambda: |-
                    return id(device) == 2;
                then:
                  - homeassistant.action:
                      service: climate.set_hvac_mode
                      data:
                        entity_id: ${climate}
                        hvac_mode: cool
                  - homeassistant.action:
                      service: climate.set_temperature
                      data:
                        entity_id: ${climate}
                      data_template:
                        temperature: '{{ my_variable | float }}'
                      variables:
                        my_variable: |-
                          return id(thermostat_temperature).state + 1.0;

            # Device 3: Vacuum
            - if:
                condition:
                  lambda: |-
                    return id(device) == 3;
                then:
                  - homeassistant.action:
                      service: vacuum.return_to_base
                      data:
                        entity_id: ${vacuum}

            # Device 4: Porch Light
            - if:
                condition:
                  lambda: |-
                    return id(device) == 4;
                then:
                  - homeassistant.action:
                      service: light.turn_on
                      data:
                        entity_id: ${porch_light}
                        brightness_step_pct: '10'

            # Device 5: Ceiling Fan
            - if:
                condition:
                  lambda: |-
                    return id(device) == 5;
                then:
                  - homeassistant.action:
                      service: fan.increase_speed
                      data:
                        entity_id: ${ceiling_fan}

            # Device 6: Aircon (SAFE: force cool, then nudge temp)
            - if:
                condition:
                  lambda: |-
                    return id(device) == 6;
                then:
                  - homeassistant.action:
                      service: climate.set_hvac_mode
                      data:
                        entity_id: ${aircon}
                        hvac_mode: cool
                  - homeassistant.action:
                      service: climate.set_temperature
                      data:
                        entity_id: ${aircon}
                      data_template:
                        temperature: '{{ my_variable | float }}'
                      variables:
                        my_variable: |-
                          return id(aircon_temperature).state + 1.0;

            # Device 7: Dehumidifier
            - if:
                condition:
                  lambda: |-
                    return id(device) == 7;
                then:
                  - homeassistant.action:
                      service: humidifier.set_humidity
                      data:
                        entity_id: ${dehumidifier}
                      data_template:
                        humidity: '{{ my_variable | float }}'
                      variables:
                        my_variable: |-
                          return id(dehumidifier_humidity).state + 5.0;

            # Device 8: Lamp
            - if:
                condition:
                  lambda: |-
                    return id(device) == 8;
                then:
                  - homeassistant.action:
                      service: light.turn_on
                      data:
                        entity_id: ${lamp}
                        brightness_step_pct: '10'

      - lambda: |-
          id(inactivity_time) = 0;


#  - platform: rc522
#    uid: ${tag1}
#    name: "NFC Tag"
#    on_press:
#    - homeassistant.action:
#        service: light.toggle
#        data:
#          entity_id: ${desk_led}

button:
  - platform: template
    name: "Alarm"
    id: alarm_sound
    icon: "mdi:bell-ring"
    on_press:
    - rtttl.play: ${alarm_sound}
    - switch.turn_on: screen_saver
    - lambda: |-
        id(inactivity_time) = 0;

color:
  - id: background_color
    hex: ${background_color}
  - id: icon_on
    hex: 'f28800'
  - id: icon_off
    hex: 'e7aa77'
  - id: icon_big_on
    hex: 'ffebbf'
  - id: icon_big_off
    hex: 'f78f1d'
  - id: dark_orange
    hex: 'd2750b'
  - id: light_orange
    hex: 'f9c699'

font:
  - file: "gfonts://Space Grotesk"
    id: clock_time
    size: 40
    glyphs: ${allowed_characters}
  - file: "gfonts://Space Grotesk"
    id: secondary
    size: 18
    glyphs: ${allowed_characters}
  - file: "gfonts://Space Grotesk"
    id: small_font
    size: 12
    glyphs: ${allowed_characters}

globals:
  - id: g_apply_now
    type: bool
    restore_value: no
    initial_value: 'false'

  - id: on_color_picker
    type: bool
    restore_value: no
    initial_value: 'false'

  - id: inactivity_time
    type: int
    restore_value: no
    initial_value: '0'

  - id: device
    type: int
    restore_value: no
    initial_value: '0'

  # Color picker globals
  - id: g_h
    type: float
    restore_value: no
    initial_value: '0'

  - id: g_s
    type: float
    restore_value: no
    initial_value: '0'

  - id: g_v
    type: float
    restore_value: no
    initial_value: '1'

  - id: g_h_last
    type: float
    restore_value: no
    initial_value: '999'

  - id: g_s_last
    type: float
    restore_value: no
    initial_value: '999'

i2c:
  - id: internal_i2c
    sda: GPIO11
    scl: GPIO12
    scan: False

image:
  - file: ${background_image}
    id: background_image
    resize: 405x405
    type: RGB
    transparency: alpha_channel

  - file: ${background_image_saver}
    id: background_image_saver
    resize: 245x245
    type: RGB
    transparency: alpha_channel
  - file: ${background_image_device}
    id: background_image_device
    resize: 245x245
    type: RGB
    transparency: alpha_channel

  - file: mdi:home
    id: icon_home
    resize: 40x40
    type: BINARY
    transparency: chroma_key
  - file: mdi:plus-thick
    id: plus
    resize: 30x30
    type: BINARY
    transparency: chroma_key
  - file: mdi:minus-thick
    id: minus
    resize: 30x30
    type: BINARY
    transparency: chroma_key
  - file: mdi:home-map-marker
    id: vacuum_dock
    resize: 30x30
    type: BINARY
    transparency: chroma_key
  - file: mdi:play-box
    id: play_icon
    resize: 30x30
    type: BINARY
    transparency: chroma_key
  - file: mdi:pause-box
    id: pause_icon
    resize: 30x30
    type: BINARY
    transparency: chroma_key
  - file: mdi:palette
    id: palette_icon
    resize: 20x20
    type: BINARY
    transparency: chroma_key

  - file: ${icon_1}
    id: icon_1
    resize: 33x33
    type: BINARY
    transparency: chroma_key
  - file: ${icon_1}
    id: icon_1_big
    resize: 100x100
    type: BINARY
    transparency: chroma_key
    
  - file: ${icon_2}
    id: icon_2
    resize: 33x33
    type: BINARY
    transparency: chroma_key
  - file: ${icon_2}
    id: icon_2_big
    resize: 100x100
    type: BINARY
    transparency: chroma_key
    
  - file: ${icon_3}
    id: icon_3
    resize: 33x33
    type: BINARY
    transparency: chroma_key
  - file: ${icon_3}
    id: icon_3_big
    resize: 100x100
    type: BINARY
    transparency: chroma_key
    
  - file: ${icon_4}
    id: icon_4
    resize: 33x33
    type: BINARY
    transparency: chroma_key
  - file: ${icon_4}
    id: icon_4_big
    resize: 100x100
    type: BINARY
    transparency: chroma_key
    
  - file: ${icon_5}
    id: icon_5
    resize: 33x33
    type: BINARY
    transparency: chroma_key
  - file: ${icon_5}
    id: icon_5_big
    resize: 100x100
    type: BINARY
    transparency: chroma_key
    
  - file: ${icon_6}
    id: icon_6
    resize: 33x33
    type: BINARY
    transparency: chroma_key
  - file: ${icon_6}
    id: icon_6_big
    resize: 100x100
    type: BINARY
    transparency: chroma_key
    
  - file: ${icon_7}
    id: icon_7
    resize: 33x33
    type: BINARY
    transparency: chroma_key
  - file: ${icon_7}
    id: icon_7_big
    resize: 100x100
    type: BINARY
    transparency: chroma_key
    
  - file: ${icon_8}
    id: icon_8
    resize: 33x33
    type: BINARY
    transparency: chroma_key
  - file: ${icon_8}
    id: icon_8_big
    resize: 100x100
    type: BINARY
    transparency: chroma_key
    
interval:
  - interval: 1s
    then:
      - lambda: |-
          id(inactivity_time) += 1;

          if (id(auto_lock).state) {
            if (id(inactivity_time) > id(screen_saver_time).state && id(inactivity_time) < id(auto_lock_time_out).state ) {
                id(screen_saver).turn_on();
            } 
            if (id(inactivity_time) > id(auto_lock_time_out).state) {
                id(backlight_pwm).turn_off();
                id(mravocado_display).turn_off();
                id(screen_saver).turn_off();
            }
          }

          else {
            if (id(inactivity_time) > id(screen_saver_time).state) {
                id(screen_saver).turn_on();
            } 
          }

light:
  - platform: monochromatic
    name: "Backlight"
    output: backlight_pwm
    id: backlight
    default_transition_length: 0s
    restore_mode: ALWAYS_ON
    internal: True

number:
  - platform: template
    name: "Auto Lock"
    id: auto_lock_time_out
    icon: "mdi:timer-sand"
    optimistic: true
    min_value: 20
    max_value: 300
    step: 10
    unit_of_measurement: "s"
    restore_value: true
  - platform: template
    name: "Screen Saver"
    id: screen_saver_time
    icon: "mdi:screen-rotation-lock"
    optimistic: true
    min_value: 10
    max_value: 300
    step: 10
    unit_of_measurement: "s"
    restore_value: true

output:
  - platform: ledc
    pin: GPIO3
    id: buzzer
  - platform: ledc
    pin: GPIO9
    id: backlight_pwm

#rc522_i2c:
#  - i2c_id: internal_i2c
#    id: tag_reader
#    address: 0x28
#    on_tag:
#      then:
#        - rtttl.play: "success:d=24,o=5,b=100:c,g,b"
#        - homeassistant.tag_scanned: !lambda 'return x;'

rtttl:
  output: buzzer
  
sensor:
  - platform: rotary_encoder
    id: encoder
    pin_a: GPIO40
    pin_b: GPIO41
    on_clockwise:
      then:
        - if:
            condition:
              switch.is_on: menu_sounds
            then:
            - rtttl.play: ${menu_sound}
        - if:
            condition:
              display.is_displaying_page: home
            then:
            - lambda: |-
                if (id(device) == 8) {
                  id(device) = 1;
                }
                else {
                  id(device) += 1;
                }
        - if:
            condition:
              display.is_displaying_page: color_picker
            then:
            - lambda: |-
                id(g_h) += 10.0f;
                if (id(g_h) >= 360.0f) id(g_h) = 0.0f;
            - if:
                condition:
                  lambda: return id(device) == 1;
                then:
                - homeassistant.action:
                    service: light.turn_on
                    data_template:
                      entity_id: "${desk_led}"
                      hs_color: "[{{ hue }}, {{ sat }}]"
                    variables:
                      hue: !lambda 'return id(g_h);'
                      sat: !lambda 'return id(g_s) * 100.0;'
            - if:
                condition:
                  lambda: return id(device) == 4;
                then:
                - homeassistant.action:
                    service: light.turn_on
                    data_template:
                      entity_id: "${porch_light}"
                      hs_color: "[{{ hue }}, {{ sat }}]"
                    variables:
                      hue: !lambda 'return id(g_h);'
                      sat: !lambda 'return id(g_s) * 100.0;'
            - if:
                condition:
                  lambda: return id(device) == 8;
                then:
                - homeassistant.action:
                    service: light.turn_on
                    data_template:
                      entity_id: "${lamp}"
                      hs_color: "[{{ hue }}, {{ sat }}]"
                    variables:
                      hue: !lambda 'return id(g_h);'
                      sat: !lambda 'return id(g_s) * 100.0;'
        - if:
            condition:
              display.is_displaying_page: device_control
            then:
            - if:
                condition:
                  lambda: |-
                    return id(device) == 1;
                then:
                - homeassistant.action:
                    service: light.turn_on
                    data:
                      entity_id: ${desk_led}
                      brightness_step_pct: '10'
            - if:
                condition:
                  lambda: |-
                    return id(device) == 2;
                then:
                - homeassistant.action:
                    service: climate.set_temperature
                    data:
                      entity_id: ${climate}
                    data_template:
                      temperature: '{{ my_variable | float }}'
                    variables:
                      my_variable: |-
                        return id(thermostat_temperature).state + 1.0;
            - if:
                condition:
                  lambda: |-
                    return id(device) == 3;
                then:
                - homeassistant.action:
                    service: vacuum.return_to_base
                    data:
                      entity_id: ${vacuum}
            - if:
                condition:
                  lambda: |-
                    return id(device) == 4;
                then:
                - homeassistant.action:
                    service: light.turn_on
                    data:
                      entity_id: ${porch_light}
                      brightness_step_pct: '10'
            - if:
                condition:
                  lambda: |-
                    return id(device) == 5;
                then:
                - homeassistant.action:
                    service: fan.increase_speed
                    data:
                      entity_id: ${ceiling_fan}
            - if:
                condition:
                  lambda: |-
                    return id(device) == 6;
                then:
                - homeassistant.action:
                    service: climate.set_temperature
                    data:
                      entity_id: ${aircon}
                    data_template:
                      temperature: '{{ my_variable | float }}'
                    variables:
                      my_variable: |-
                        return id(aircon_temperature).state + 1.0;
            - if:
                condition:
                  lambda: |-
                    return id(device) == 7;
                then:
                - homeassistant.action:
                    service: humidifier.set_humidity
                    data:
                      entity_id: ${dehumidifier}
                    data_template:
                      humidity: '{{ my_variable | float }}'
                    variables:
                      my_variable: |-
                        return id(dehumidifier_humidity).state + 5.0;
            - if:
                condition:
                  lambda: |-
                    return id(device) == 8;
                then:
                - homeassistant.action:
                    service: light.turn_on
                    data:
                      entity_id: ${lamp}
                      brightness_step_pct: '10'
        - lambda: |-
            id(inactivity_time) = 0;
    on_anticlockwise:
      then:
        - if:
            condition:
              switch.is_on: menu_sounds
            then:
            - rtttl.play: ${menu_sound}
        - if:
            condition:
              display.is_displaying_page: home
            then:
            - lambda: |-
                if (id(device) == 1) {
                  id(device) = 8;
                }
                if (id(device) == 0) {
                  id(device) = 8;
                }
                else {
                  id(device) -= 1;
                }
        - if:
            condition:
              display.is_displaying_page: color_picker
            then:
            - lambda: |-
                id(g_h) -= 10.0f;
                if (id(g_h) < 0.0f) id(g_h) = 350.0f;
            - if:
                condition:
                  lambda: return id(device) == 1;
                then:
                - homeassistant.action:
                    service: light.turn_on
                    data_template:
                      entity_id: "${desk_led}"
                      hs_color: "[{{ hue }}, {{ sat }}]"
                    variables:
                      hue: !lambda 'return id(g_h);'
                      sat: !lambda 'return id(g_s) * 100.0;'
            - if:
                condition:
                  lambda: return id(device) == 4;
                then:
                - homeassistant.action:
                    service: light.turn_on
                    data_template:
                      entity_id: "${porch_light}"
                      hs_color: "[{{ hue }}, {{ sat }}]"
                    variables:
                      hue: !lambda 'return id(g_h);'
                      sat: !lambda 'return id(g_s) * 100.0;'
            - if:
                condition:
                  lambda: return id(device) == 8;
                then:
                - homeassistant.action:
                    service: light.turn_on
                    data_template:
                      entity_id: "${lamp}"
                      hs_color: "[{{ hue }}, {{ sat }}]"
                    variables:
                      hue: !lambda 'return id(g_h);'
                      sat: !lambda 'return id(g_s) * 100.0;'
        - if:
            condition:
              display.is_displaying_page: device_control
            then:
            - if:
                condition:
                  lambda: |-
                    return id(device) == 1;
                then:
                - homeassistant.action:
                    service: light.turn_on
                    data:
                      entity_id: ${desk_led}
                      brightness_step_pct: '-10'
            - if:
                condition:
                  lambda: |-
                    return id(device) == 2;
                then:
                - homeassistant.action:
                    service: climate.set_temperature
                    data:
                      entity_id: ${climate}
                    data_template:
                      temperature: '{{ my_variable | float }}'
                    variables:
                      my_variable: |-
                        return id(thermostat_temperature).state - 1.0;
            - if:
                condition:
                  lambda: |-
                    return id(device) == 3;
                then:
                - if:
                    condition:
                      lambda: 'return id(device_vacuum).state == "cleaning";'
                    then:
                    - homeassistant.action:
                        service: vacuum.pause
                        data:
                          entity_id: ${vacuum}
                    else:
                    - homeassistant.action:
                        service: vacuum.start
                        data:
                          entity_id: ${vacuum}
            - if:
                condition:
                  lambda: |-
                    return id(device) == 4;
                then:
                - homeassistant.action:
                    service: light.turn_on
                    data:
                      entity_id: ${porch_light}
                      brightness_step_pct: '-10'
            - if:
                condition:
                  lambda: |-
                    return id(device) == 5;
                then:
                - homeassistant.action:
                    service: fan.decrease_speed
                    data:
                      entity_id: ${ceiling_fan}
            - if:
                condition:
                  lambda: |-
                    return id(device) == 6;
                then:
                - homeassistant.action:
                    service: climate.set_temperature
                    data:
                      entity_id: ${aircon}
                    data_template:
                      temperature: '{{ my_variable | float }}'
                    variables:
                      my_variable: |-
                        return id(aircon_temperature).state - 1.0;
            - if:
                condition:
                  lambda: |-
                    return id(device) == 7;
                then:
                - homeassistant.action:
                    service: humidifier.set_humidity
                    data:
                      entity_id: ${dehumidifier}
                    data_template:
                      humidity: '{{ my_variable | float }}'
                    variables:
                      my_variable: |-
                        return id(dehumidifier_humidity).state - 5.0;
            - if:
                condition:
                  lambda: |-
                    return id(device) == 8;
                then:
                - homeassistant.action:
                    service: light.turn_on
                    data:
                      entity_id: ${lamp}
                      brightness_step_pct: '-10'
        - lambda: |-
            id(inactivity_time) = 0;

  - platform: homeassistant
    id: desk_led_brightness
    entity_id: ${desk_led}
    attribute: brightness
    internal: true
    filters:
      - lambda: |-
          if (isnan(x)) { return 0; }
          else { return x; }

  - platform: homeassistant
    id: porch_light_brightness
    entity_id: ${porch_light}
    attribute: brightness
    internal: true
    filters:
      - lambda: |-
          if (isnan(x)) { return 0; }
          else { return x; }

  - platform: homeassistant
    id: thermostat_temperature
    entity_id: ${climate}
    attribute: temperature
    internal: true

  - platform: homeassistant
    id: aircon_temperature
    entity_id: ${aircon}
    attribute: temperature
    internal: true

  - platform: homeassistant
    id: dehumidifier_humidity
    entity_id: ${dehumidifier}
    attribute: humidity
    internal: true

  - platform: homeassistant
    id: ceiling_fan_speed
    entity_id: ${ceiling_fan}
    attribute: percentage
    internal: true
    filters:
      - lambda: |-
          if (isnan(x)) { return 0; }
          else { return x; }

  - platform: homeassistant
    id: lamp_brightness
    entity_id: ${lamp}
    attribute: brightness
    internal: true
    filters:
      - lambda: |-
          if (isnan(x)) { return 0; }
          else { return x; }
spi:
  id: spi_bus
  mosi_pin: GPIO5
  clk_pin: GPIO6

switch:
  - platform: template
    name: "Auto Lock"
    id: auto_lock
    icon: "mdi:lock-clock"
    optimistic: true
    restore_mode: 'restore_default_off'
  - platform: template
    name: "Display"
    id: mravocado_display
    icon: "mdi:fit-to-screen"
    optimistic: true
    restore_mode: 'always_on'
    on_turn_on:
      - light.turn_on:
          id: backlight
          brightness: 100%
      - lambda: |-
          id(inactivity_time) = 0;
    on_turn_off:
      - light.turn_off: backlight
      - display.page.show: home
      - lambda: |-
          id(device) = 0;
  - platform: template
    name: "Screen Saver"
    id: screen_saver
    icon: "mdi:screen-rotation-lock"
    optimistic: true
    restore_mode: 'always_off'
    internal: true
    on_turn_on:
      - light.turn_on:
          id: backlight
          brightness: 50%
      - display.page.show: locked_screen
      - lambda: |-
          id(device) = 0;

  - platform: template
    name: "Menu Sounds"
    id: menu_sounds
    icon: "mdi:playlist-music"
    optimistic: true
    restore_mode: 'restore_default_on'

text_sensor:
 
  - platform: homeassistant
    id: device_desk_led
    entity_id: ${desk_led}
    internal: true
  - platform: homeassistant
    id: device_thermostat
    entity_id: ${climate}
    internal: true
  - platform: homeassistant
    id: device_vacuum
    entity_id: ${vacuum}
    internal: true
  - platform: homeassistant
    id: device_porch_light
    entity_id: ${porch_light}
    internal: true
  - platform: homeassistant
    id: device_ceiling_fan
    entity_id: ${ceiling_fan}
    internal: true
  - platform: homeassistant
    id: device_dehumidifier
    entity_id: ${dehumidifier}
    internal: true
  - platform: homeassistant
    id: device_aircon
    entity_id: ${aircon}
    internal: true
  - platform: homeassistant
    id: device_lamp
    entity_id: ${lamp}
    internal: true

time:
  # RTC
  - platform: pcf8563
    id: rtctime
    i2c_id: internal_i2c
    address: 0x51
    update_interval: never
  - platform: homeassistant
    id: esptime
    on_time_sync:
      then:
        - pcf8563.write_time:

touchscreen:
  - platform: ft5x06
    id: touchscreen_mravocado
    i2c_id: internal_i2c
    address: 0x38
    update_interval: 50ms
    transform:
      swap_xy: false
      mirror_x: true     # flip left/right
      mirror_y: true     # flip top/bottom

    # Color picker touch handling (no HA-ID calls inside lambda)
    on_update:
      then:
        # 1) Compute HSV only while on color picker and finger is down
        - lambda: |-
            if (!id(on_color_picker)) {
              id(g_apply_now) = false;
              return;
            }

            bool active = false;
            for (auto &t : touches) {
              if (t.state <= 2) {  // pressed/moved/held
                const float cx = 120.0f, cy = 120.0f;
                const float dx = (float)t.x - cx;
                const float dy = cy - (float)t.y;   // up is +
                const float r  = sqrtf(dx*dx + dy*dy);
                const float RMAX = 100.0f;
                const float WHITE_R = 10.0f;

                if (r < WHITE_R) {
                  id(g_h) = 0.0f; id(g_s) = 0.0f; id(g_v) = 1.0f;
                } else if (r <= RMAX) {
                  float angle = atan2f(dy, dx);
                  if (angle < 0) angle += 2.0f * (float)M_PI;
                  id(g_h) = angle * 180.0f / (float)M_PI;
                  float sat = r / RMAX;
                  if (sat > 1.0f) sat = 1.0f;
                  id(g_s) = sat;
                  id(g_v) = 1.0f;
                }
                active = true;
                break;  // first touch only
              }
            }

            // Debounce: only mark "apply now" if values changed meaningfully
            if (active) {
              bool changed = (fabsf(id(g_h) - id(g_h_last)) > 0.5f) || (fabsf(id(g_s) - id(g_s_last)) > 0.01f);
              if (changed) {
                id(g_h_last) = id(g_h);
                id(g_s_last) = id(g_s);
                id(g_apply_now) = true;
              } else {
                id(g_apply_now) = false;
              }
            } else {
              id(g_apply_now) = false;
            }

        # 2) Apply to the selected device only when flagged, using standard HA actions
        - if:
            condition:
              lambda: |-
                return id(g_apply_now) && id(device) == 1;
            then:
              - homeassistant.action:
                  service: light.turn_on
                  data_template:
                    entity_id: "${desk_led}"
                    hs_color: "[{{ hue }}, {{ sat }}]"
                  variables:
                    hue: !lambda 'return id(g_h);'
                    sat: !lambda 'return id(g_s) * 100.0;'

        - if:
            condition:
              lambda: |-
                return id(g_apply_now) && id(device) == 4;
            then:
              - homeassistant.action:
                  service: light.turn_on
                  data_template:
                    entity_id: "${porch_light}"
                    hs_color: "[{{ hue }}, {{ sat }}]"
                  variables:
                    hue: !lambda 'return id(g_h);'
                    sat: !lambda 'return id(g_s) * 100.0;'

        - if:
            condition:
              lambda: |-
                return id(g_apply_now) && id(device) == 8;
            then:
              - homeassistant.action:
                  service: light.turn_on
                  data_template:
                    entity_id: "${lamp}"
                    hs_color: "[{{ hue }}, {{ sat }}]"
                  variables:
                    hue: !lambda 'return id(g_h);'
                    sat: !lambda 'return id(g_s) * 100.0;'

display:
  - platform: ili9xxx
    id: round_display
    model: GC9A01A
    cs_pin: GPIO7
    reset_pin: GPIO8
    update_interval: 0.05s
    dc_pin: GPIO4
    invert_colors: true
    rotation: 180 
    pages:
      - id: locked_screen
        lambda: |-
          it.fill(id(background_color));
          it.image(0, 0, id(background_image_saver));

          it.strftime(120, 40, id(clock_time), TextAlign::CENTER, "%H:%M", id(esptime).now());
          it.strftime(120, 200, id(secondary), TextAlign::CENTER, "%d/%m/%y", id(esptime).now());
      - id: home
        lambda: |-
          it.fill(id(background_color));
          it.image(-80, -80, id(background_image));

          if (id(device) == 1) { it.image(103, 4, id(icon_1), id(icon_on)); }
          else { it.image(103, 4, id(icon_1), id(icon_off)); }

          if (id(device) == 2) { it.image(175, 35, id(icon_2), id(icon_on)); }
          else { it.image(175, 35, id(icon_2), id(icon_off)); }

          if (id(device) == 3) { it.image(205, 105, id(icon_3), id(icon_on)); }
          else { it.image(205, 105, id(icon_3), id(icon_off)); }

          if (id(device) == 4) { it.image(175, 175, id(icon_4), id(icon_on)); }
          else { it.image(175, 175, id(icon_4), id(icon_off)); }

          if (id(device) == 5) { it.image(103, 205, id(icon_5), id(icon_on)); }
          else { it.image(103, 205, id(icon_5), id(icon_off)); }

          if (id(device) == 6) { it.image(30, 175, id(icon_6), id(icon_on)); }
          else { it.image(30, 175, id(icon_6), id(icon_off)); }

          if (id(device) == 7) { it.image(5, 105, id(icon_7), id(icon_on)); }
          else { it.image(5, 105, id(icon_7), id(icon_off)); }

          if (id(device) == 8) { it.image(30, 35, id(icon_8), id(icon_on)); }
          else { it.image(30, 35, id(icon_8), id(icon_off)); }
      - id: color_picker
        lambda: |-
          it.fill(Color(0, 0, 0));
          
          // Draw color wheel
          const int cx = 120, cy = 120;
          const int radius = 100;
          const int white_radius = 30; // larger white center for better whites
          
          for (int y = cy - radius; y <= cy + radius; y++) {
            for (int x = cx - radius; x <= cx + radius; x++) {
              float dx = x - cx;
              float dy = cy - y;  // Flip Y for proper orientation
              float r = sqrtf(dx*dx + dy*dy);
              
              if (r <= white_radius) {
                // Larger white center with gradient to warm whites
                float white_factor = 1.0f - (r / white_radius) * 0.2f; // Keep mostly white
                int white_val = (int)(255 * white_factor);
                it.draw_pixel_at(x, y, Color(white_val, white_val, white_val));
              } else if (r <= radius) {
                float angle = atan2f(dy, dx);
                if (angle < 0) angle += 2.0f * M_PI;
                float hue = angle * 180.0f / M_PI;

                // Modified saturation calculation for better whites/yellows
                float sat = (r - white_radius) / (radius - white_radius);
                sat = sat * 0.8f; // Reduce max saturation to keep brightness               
                
                // HSV to RGB conversion
                float c = sat;
                float x_val = c * (1.0f - fabsf(fmodf(hue / 60.0f, 2.0f) - 1.0f));
                float m = 0;
                float r_val, g_val, b_val;
                
                if (hue < 60) { r_val = c; g_val = x_val; b_val = 0; }
                else if (hue < 120) { r_val = x_val; g_val = c; b_val = 0; }
                else if (hue < 180) { r_val = 0; g_val = c; b_val = x_val; }
                else if (hue < 240) { r_val = 0; g_val = x_val; b_val = c; }
                else if (hue < 300) { r_val = x_val; g_val = 0; b_val = c; }
                else { r_val = c; g_val = 0; b_val = x_val; }
                
                it.draw_pixel_at(x, y, Color(
                  (uint8_t)((r_val + m) * 255),
                  (uint8_t)((g_val + m) * 255),
                  (uint8_t)((b_val + m) * 255)
                ));
              }
            }
          }         
          // Draw current selection indicator
          float angle_rad = id(g_h) * M_PI / 180.0f;
          float sel_radius = id(g_s) * (radius - white_radius) + white_radius;
          if (id(g_s) == 0.0f) sel_radius = white_radius * 0.5f; // Center indicator for white
          
          int sel_x = cx + (int)(sel_radius * cosf(angle_rad));
          int sel_y = cy - (int)(sel_radius * sinf(angle_rad));
          
          // Simplified selection indicator for better performance
          for (int r = 2; r <= 4; r++) {
            for (int angle = 0; angle < 360; angle += 15) { // Reduced density
              float rad = angle * M_PI / 180.0;
              int x = sel_x + (int)(r * cos(rad));
              int y = sel_y + (int)(r * sin(rad));
              if (x >= 0 && x < 240 && y >= 0 && y < 240) {
                Color circle_color = (r == 3) ? Color(0, 0, 0) : Color(255, 255, 255);
                it.draw_pixel_at(x, y, circle_color);
              }
            }
          }
          
          
          // Show current HSV values
          it.printf(120, 225, id(small_font), TextAlign::CENTER, "H:%.0f° S:%.0f%% Hold for color", id(g_h), id(g_s)*100);

      - id: device_control
        lambda: |-
          it.fill(id(background_color));
          it.image(0, 0, id(background_image_device));

          it.image(98, 10, id(icon_home), id(light_orange));

          if (id(device) == 1) {

            if (id(device_desk_led).state == "on") { it.image(70, 80, id(icon_1_big), id(icon_big_on)); }
            else { it.image(70, 80, id(icon_1_big), id(icon_big_off)); }

            it.image(25, 115, id(minus), id(light_orange));
            it.printf(120, 190, id(secondary), TextAlign::CENTER, "%.0f %%", ((id(desk_led_brightness).state / 255) * 100));
            it.image(185, 115, id(plus), id(light_orange));
            
            if (${desk_led_has_color}) {
              it.image(110, 225, id(palette_icon), id(light_orange));
              it.printf(120, 210, id(small_font), TextAlign::CENTER, "Hold for color");
            }
          }

          if (id(device) == 2) {

            if (id(device_thermostat).state == "cold") { it.image(70, 80, id(icon_2_big), id(icon_big_on)); }
            else { it.image(70, 80, id(icon_2_big), id(icon_big_off)); }

            it.image(25, 115, id(minus), id(light_orange));
            it.printf(120, 210, id(secondary), TextAlign::CENTER, "%.1f°C", id(thermostat_temperature).state);
            it.image(185, 115, id(plus), id(light_orange));
          }

          if (id(device) == 3) {

            if (id(device_vacuum).state == "cleaning") { it.image(70, 80, id(icon_3_big), id(icon_big_on)); }
            else { it.image(70, 80, id(icon_3_big), id(icon_big_off)); }


            if (id(device_vacuum).state == "cleaning") {
            it.image(25, 115, id(pause_icon), id(light_orange));
            }
            else {
            it.image(25, 115, id(play_icon), id(light_orange));
            }

            it.printf(120, 210, id(secondary), TextAlign::CENTER, "%s", id(device_vacuum).state.c_str());
            it.image(185, 115, id(vacuum_dock), id(light_orange));
          }

          if (id(device) == 4) {

            if (id(device_porch_light).state == "on") { it.image(70, 80, id(icon_4_big), id(icon_big_on)); }
            else { it.image(70, 80, id(icon_4_big), id(icon_big_off)); }

            it.image(25, 115, id(minus), id(light_orange));
            it.printf(120, 190, id(secondary), TextAlign::CENTER, "%.0f %%", ((id(porch_light_brightness).state / 255) * 100));
            it.image(185, 115, id(plus), id(light_orange));
            
            if (${porch_light_has_color}) {
              it.image(110, 225, id(palette_icon), id(light_orange));
              it.printf(120, 210, id(small_font), TextAlign::CENTER, "Hold for color");
            }
          }

          if (id(device) == 5) {

            if (id(device_ceiling_fan).state == "on") { it.image(70, 80, id(icon_5_big), id(icon_big_on)); }
            else { it.image(70, 80, id(icon_5_big), id(icon_big_off)); }

            it.image(25, 115, id(minus), id(light_orange));
            it.printf(120, 210, id(secondary), TextAlign::CENTER, "%.0f %%", id(ceiling_fan_speed).state);
            it.image(185, 115, id(plus), id(light_orange));
          }

          if (id(device) == 6) {

            if (id(device_aircon).state == "cool") { it.image(70, 80, id(icon_6_big), id(icon_big_on)); }
            else { it.image(70, 80, id(icon_6_big), id(icon_big_off)); }

            it.image(25, 115, id(minus), id(light_orange));
            it.printf(120, 210, id(secondary), TextAlign::CENTER, "%.1f°C", id(aircon_temperature).state);
            it.image(185, 115, id(plus), id(light_orange));
          }

          if (id(device) == 7) {

            if (id(device_dehumidifier).state == "on") { it.image(70, 80, id(icon_7_big), id(icon_big_on)); }
            else { it.image(70, 80, id(icon_7_big), id(icon_big_off)); }

            it.image(25, 115, id(minus), id(light_orange));
            it.printf(120, 210, id(secondary), TextAlign::CENTER, "%.1f%%", id(dehumidifier_humidity).state);
            it.image(185, 115, id(plus), id(light_orange));
          }

          if (id(device) == 8) {

            if (id(device_lamp).state == "on") { it.image(70, 80, id(icon_8_big), id(icon_big_on)); }
            else { it.image(70, 80, id(icon_8_big), id(icon_big_off)); }

            it.image(25, 115, id(minus), id(light_orange));
            it.printf(120, 190, id(secondary), TextAlign::CENTER, "%.0f %%", ((id(lamp_brightness).state / 255) * 100));
            it.image(185, 115, id(plus), id(light_orange));
            
            if (${lamp_has_color}) {
              it.image(110, 225, id(palette_icon), id(light_orange));
              it.printf(120, 210, id(small_font), TextAlign::CENTER, "Hold for color");
            }
          }
